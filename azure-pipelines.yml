trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  - repo: self

variables:

  imageRepository: 'ustpoc-docker-local.jfrog.io/nodesjsdock'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Import
  displayName: Import Requirements
  jobs:
    - job: Import
      displayName: jFrog Import
      steps:
        - task: ArtifactoryNpm@1
          displayName: Install NPM from Artifactory
          inputs:
            command: 'install'
            artifactoryService: 'jFrog'
            sourceRepo: 'npm'
            workingFolder: '$(System.DefaultWorkingDirectory)'
            collectBuildInfo: true
            threads: '1'
            buildName: '$(Build.DefinitionName)'
            buildNumber: '$(Build.BuildNumber)'
            includeEnvVars: true

        - task: ArtifactoryToolsInstaller@1
          displayName: Install jFrog Client from Artifactory
          inputs:
            artifactoryService: 'jFrog'
            cliInstallationRepo: 'jfrog-cli'

- stage: Check
  displayName: Check Stage
  jobs:
    - job: Check
      displayName: Code Check
      steps:
        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'SonarCloud'
            organization: 'andywardust'
            scannerMode: 'CLI'
            configMode: 'file'

        - task: SonarCloudAnalyze@1

        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '180'

        - script: |
            curl -LJO https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar
            java -jar wss-unified-agent.jar
            npm test
            npm run-script build
          displayName: 'npm test and build'


#
# This will not work without IP resolution to Schroders being fixed
#    - job: Checkmarx
#      pool:
#        vmImage: 'windows-latest'
#      steps:
#        - task: Security static source code analysis@88
#          inputs:
#            CheckmarxService: 'CheeckMarxSchroders'
#            projectName: 'nodejsdock'
#            preset: 'Checkmarx Default'
#            fullTeamName: 'CxServer\ASA\UST-Global\UST-POC'
#            incScan: true

- stage: Build
  displayName: Build Stage
  dependsOn: Check
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'pull'
#            artifactoryService: 'jFrog'
#            sourceRepo: 'docker'
#            imageName: 'ustpoc-docker.jfrog.io/node:latest'

        - task: Docker@2
          inputs:
            repository: $(imageRepository)
            command: 'build'
            Dockerfile: '$(dockerfilePath)'
            tags: '$(tag)'

        - task: UniversalPackages@0
          inputs:
            command: 'download'
            downloadDirectory: '$(System.DefaultWorkingDirectory)'
            feedsToUse: 'internal'
            vstsFeed: 'd09b6095-5d34-406d-8b60-54c555945e9a'
            vstsFeedPackage: '819e5519-79bf-4056-8920-f8c9bd51212c'
            vstsPackageVersion: '19.3.311'

        - task: CmdLine@2
          inputs:
            script: |
              sudo mv $(System.DefaultWorkingDirectory)/twistcli /usr/bin/twistcli
              sudo chmod +x /usr/bin/twistcli

        - task: twistcli-scan@1
          inputs:
            scanType: 'images'
            twistlockService: 'twistlock_cli'
            vulnerabilityThreshold: 'critical'
            onlyFixed: false
            gracePeriod: '0'
            complianceThreshold: 'critical'
            artifact: '$(imageRepository):$(tag)'

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $token = [System.Text.Encoding]::UTF8.GetBytes("e8617364966523ad262d48efb6e681393cea0a21:")
              $base64 = [System.Convert]::ToBase64String($token)

              $basicAuth = [string]::Format("Basic {0}", $base64)
              $headers = @{ Authorization = $basicAuth }

              $result = Invoke-RestMethod -Method Get -Uri 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=AndyWardUST_nodejsdock&organization=andywardust' -Headers $headers
              $result | ConvertTo-Json | Write-Host

              if ($result.projectStatus.status -eq "OK") {
              Write-Host "Quality Gate Succeeded"
              echo "##vso[task.setvariable variable=sonarGateVar;isOutput=true]Quality Gate Succeeded"
              }else{
              throw "Quality gate failed"
              }

        - task: ArtifactoryPublishBuildInfo@1
          inputs:
            artifactoryService: 'jFrog'
            buildName: '$(Build.DefinitionName)'
            buildNumber: '$(Build.BuildNumber)'

#        - upload: manifests
#          artifact: manifests

#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'push'
#            artifactoryService: 'jFrog'
#            targetRepo: 'docker-local'
#            imageName: '$(imageRepository):$(tag)'
#            collectBuildInfo: true
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'
#            includeEnvVars: true
        
#        - task: ArtifactoryPublishBuildInfo@1
#          inputs:
#            artifactoryService: 'jFrog'
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'

#        - task: OctopusCreateRelease@4
#          inputs:
#            OctoConnectedServiceName: 'OctopusDeploy'
#            Space: 'Spaces-1'
#            ProjectName: 'Projects-1'
#            Channel: 'Channels-1'
#            DeployToEnvironment: 'Environments-1'
#            DeploymentProgress: true

#- stage: Gather
#  displayName: Gather Results
#  dependsOn: Build
#  jobs:
#    - job: getSonarAPI
#      steps:

#- stage: Push
#  displayName: Push Results
#  dependsOn: Gather
#  jobs:
#    - job: PushBuildResults
#      steps:


#      pool: server
#      steps:
#        - task: InvokeRESTAPI@1
#          inputs:
#            connectionType: 'connectedServiceName'
#            serviceConnection: 'SonarCloudAPI'
#            method: 'GET'
#            headers: |
#              {
#              "Authorization":"Basic ZTg2MTczNjQ5NjY1MjNhZDI2MmQ0OGVmYjZlNjgxMzkzY2VhMGEyMTo="
#              }
#            urlSuffix: '/qualitygates/project_status?projectKey=AndyWardUST_nodejsdock&organization=andywardust'
#            waitForCompletion: 'true'