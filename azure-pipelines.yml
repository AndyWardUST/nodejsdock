# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  imageRepository: 'nodesjsdock'
  containerRegistry: 'pocschrodersregistry.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'TBA'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Import
  displayName: Import Requirements
  jobs:
    - job: Import
      displayName: jFrog Import
      steps:
        - task: ArtifactoryNpm@1
          displayName: Install NPM from Artifactory
          inputs:
            command: 'install'
            artifactoryService: 'jFrog'
            sourceRepo: 'npm'
            workingFolder: '$(System.DefaultWorkingDirectory)'
            collectBuildInfo: true
            threads: '1'
            buildName: '$(Build.DefinitionName)'
            buildNumber: '$(Build.BuildNumber)'
            includeEnvVars: true

        - task: ArtifactoryToolsInstaller@1
          inputs:
            artifactoryService: 'jFrog'
            cliInstallationRepo: 'jfrog-cli'

        - task: CmdLine@2
          inputs:
            script: |
              sudo ls
              curl ifconfig.co

- stage: Check
  displayName: Check Stage
  jobs:
    - job: Check
      displayName: Code Check
      steps:
        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'SonarCloud'
            organization: 'andywardust'
            scannerMode: 'CLI'
            configMode: 'file'

# This will not work without UST Global allowing sonarcloud access to organisation
        - task: SonarCloudAnalyze@1

        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '300'

        - script: |
            curl -LJO https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar
            java -jar wss-unified-agent.jar
            npm test
            npm run-script build
          displayName: 'npm test and build'

# This will not work without IP resolution to Schroders being fixed
#    - job: Checkmarx
#      pool:
#        vmImage: 'windows-latest'
#      steps:
#        - task: Security static source code analysis@88
#          inputs:
#            CheckmarxService: 'CheeckMarxSchroders'
#            projectName: 'nodejsdock'
#            preset: 'Checkmarx Default'
#            fullTeamName: 'CxServer\ASA\UST-Global\UST-POC'
#            incScan: true

- stage: Build
  displayName: Build Stage
  dependsOn: Check
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:


#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'pull'
#            artifactoryService: 'jFrog'
#            sourceRepo: 'docker'
#            imageName: 'ustpoc-docker.jfrog.io/centos'
#            collectBuildInfo: true
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'
#            includeEnvVars: true

        - task: Docker@2
          inputs:
            repository: $(imageRepository)
            command: 'build'
            Dockerfile: '$(dockerfilePath)'
            tags: '$(tag)'

        - task: UniversalPackages@0
          inputs:
            command: 'download'
            downloadDirectory: '$(System.DefaultWorkingDirectory)'
            feedsToUse: 'internal'
            vstsFeed: 'd09b6095-5d34-406d-8b60-54c555945e9a'
            vstsFeedPackage: '819e5519-79bf-4056-8920-f8c9bd51212c'
            vstsPackageVersion: '19.3.311'

        - task: CmdLine@2
          inputs:
            script: |
              sudo ls
              sudo mv $(System.DefaultWorkingDirectory)/twistcli /usr/bin/twistcli
              sudo chmod +x /usr/bin/twistcli

# This will fail until CVE in base docker image is resolved
        - task: twistcli-scan@1
          inputs:
            scanType: 'images'
            twistlockService: 'twistlock_cli'
            vulnerabilityThreshold: 'critical'
            onlyFixed: false
            gracePeriod: '0'
            complianceThreshold: 'critical'
            artifact: '$(imageRepository):$(tag)'

#        - task: Docker@2
#          inputs:
#            containerRegistry: $(dockerRegistryServiceConnection)
#            repository: '$(imageRepository)'
#            command: 'push'
#            tags: '$(tag)'

#        - upload: manifests
#          artifact: manifests

        - task: CmdLine@2
          inputs:
            script: |
              sudo ls
              sudo docker images

#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'push'
#            artifactoryService: 'jFrog'
#            targetRepo: 'docker-local'
#            imageName: '$(imageRepository):$(tag)'
#            collectBuildInfo: true
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'
#            includeEnvVars: true
        