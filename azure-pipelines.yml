trigger:
- master

resources:
  - repo: self

variables:
  imageRepository: 'nodesjsdock'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Node
  displayName: Node Built and Test
  pool: 'Node Pool'
  jobs:
    - job: Import
      displayName: jFrog Import
      steps:
        - script: |
            echo "Running jFrog setups"

        - task: UseNode@1
          inputs:
            version: '12.13.0'
            checkLatest: true

        - task: Npm@1
          inputs:
            command: 'install'
            
        - task: SonarCloudPrepare@1
          inputs:
            SonarCloud: 'SonarCloud'
            organization: 'andywardust'
            scannerMode: 'CLI'
            configMode: 'file'

        - task: SonarCloudAnalyze@1

        - task: SonarCloudPublish@1
          inputs:
            pollingTimeoutSec: '180'

        - script: |
            npm test
            npm run-script build
          displayName: 'npm test and build'


        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              $token = [System.Text.Encoding]::UTF8.GetBytes("e8617364966523ad262d48efb6e681393cea0a21:")
              $base64 = [System.Convert]::ToBase64String($token)

              $basicAuth = [string]::Format("Basic {0}", $base64)
              $headers = @{ Authorization = $basicAuth }

              $result = Invoke-RestMethod -Method Get -Uri 'https://sonarcloud.io/api/qualitygates/project_status?projectKey=AndyWardUST_nodejsdock&organization=andywardust' -Headers $headers
              $result | ConvertTo-Json | Write-Host

              if ($result.projectStatus.status -eq "OK") {
              Write-Host "Quality Gate Succeeded"
              echo "##vso[task.setvariable variable=sonarGateVar;isOutput=true]Quality Gate Succeeded"
              }else{
              throw "Quality gate failed"
              }

- stage: Build
  displayName: Build Stage with Docker
  pool: 'Docker Pool'
  jobs:
    - job: Build
      displayName: Build
      steps:
        - task: Docker@2
          inputs:
            repository: $(imageRepository)
            command: 'build'
            Dockerfile: '$(dockerfilePath)'
            tags: '$(tag)'